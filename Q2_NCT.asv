% Q2
warning("off", "all");
% loc = 1; scale = 2; 
mu = -2; df = 4; alpha = 0.01; % possibly new paramters 
trueES_nct1 = theoretical_ES_NCT_direct_integration(df, mu, alpha);
trueES_nct2 = theoretical_ES_NCT_from_simulation(df, mu, alpha, 1e7);
trueES_t = theoretical_ES_t(0, 1, df, alpha);
% when mu = 0, nct should be same as t 
disp([trueES_nct1, trueES_nct2, trueES_t]);
% 
rep = 2; % parametric bootstrap mle is too slow
disp(["rep", rep, "mu", mu]);
for T=[250, 500, 2000]
    [coverage_accuracy, avg_interval_length] = ...
        nonparametric_bootstrap_ES_nct(T, rep, df, mu, alpha, trueES_nct1);
    disp(["nonparametric", "T", T, coverage_accuracy, avg_interval_length]);
    [coverage_accuracy, avg_interval_length] = ...
        parametric_bootstrap_ES_nct(T, rep, df, mu, alpha, trueES_nct1);
    disp(["parametric", "T", T, coverage_accuracy, avg_interval_length]);
end


% % page 372 of intermediate-probability-a-computational-approach.pdf
% % k: degrees of freedom, mu: non-central parameter
% function cdf = tcdfsing(tvec,k,mu)
%     cdf=zeros(length(tvec),1);
%     for tloop=1:length(tvec)
%         t=tvec(tloop);
%         intsum=0; lo=0; up=1; done=0; 
%         while ~done
%             s = quadl(@ff,lo,up,1e-10,0,t,k,mu); intsum=intsum+s;
%             if (s<1e-12) & (ff(up,t,k,mu) <= ff(up,t,k,mu)), done=1; end
%             % this piece of the integrand is extremely small and decreasing 
%             lo=up; up=2*up;
%         end
%     cdf(tloop) = intsum * 2^(1-k/2) * k^(k/2) / gamma(k/2); 
%     end
% end

% function s=ff(z,t,k,mu)
%     s=normcdf(t*z,mu,1) .* z.^(k-1) .* exp(-0.5 * k * z.^2);
% end

% % page 352 of fundamental-statistics.pdf
% % nu: degrees of freedom; gam: noncentrality parameter
% % x is the vector of points at which to evaluate the log density
% function pdfln = stdnctpdfln_j(x, nu, gam)
%     vn2 = (nu+1) / 2; rho = x .^ 2;
%     pdfln = gammaln(vn2) - 1/2 * log(pi*nu) - gammaln(nu/2) ...
%         - vn2 * log1p(rho/nu);
%     if (all(gam == 0)), return; end
%     idx = (pdfln >= -37); % -36.841 = log(1e-16)
%     if (any(idx))
%         gcg = gam .^ 2; pdfln = pdfln - 0.5 * gcg; xcg = x .* gam;
%         term = 0.5 * log(2) + log(xcg) - 0.5 * log(max(realmin, nu+rho));
%         term(term == -inf) = log(realmin); term(term == +inf) = log(realmax);
%         maxiter = 1e4; k = 0;
%         logterms = gammaln((nu+1+k)/2) - gammaln(k+1) ...
%             - gammaln(vn2) + k * term;
%         fractions = real(exp(logterms)); logsumk = log(fractions);
%         while (k < maxiter)
%             k = k + 1;
%             logterms = gammaln((nu+1+k)/2) - gammaln(k+1)...
%                 - gammaln(vn2) + k * term(idx);
%             fractions = real(exp(logterms - logsumk(idx)));
%             logsumk(idx) = logsumk(idx) + log1p(fractions);
%             idx(idx) = (abs(fractions) > 1e-4); 
%             if (all(idx == false)), break; end
%         end
%         pdfln = real(pdfln + logsumk);
%     end
% end

% function pdf = stdnctpdf(x, nu, gam)
%     pdf = exp(stdnctpdfln_j(x, nu, gam));
% end

% function pdf = nctpdf(x, nu, gam, loc, scale)
%     y = (x-loc) / scale;
%     pdf = exp(stdnctpdf(y, nu, gam)) / scale;
% end

% % k: degrees of freedom 
% % mu: non-centrality parameter 
% function nct = nctrnd_simulate(k, mu, M, N)
%     X = normrnd(mu, 1, M, N);
%     Y = chi2rnd(k, M, N);
%     nct = X ./ sqrt(Y ./k);
% end

function [coverage_accuracy, avg_interval_length] = parametric_bootstrap(...
    T, rep, df, mu, alpha, trueES)
    B = 500; 
    captures_trueES_cnt = 0;
    interval_length = 0;
    for i = 1:rep
        data = nctrnd_simulate(df, mu, T, 1);
        ci = bootci(B, {@(data) ES_from_MLE(data, alpha, df, mu), data},...
            'Alpha', 0.1);
        lower = ci(1);
        upper = ci(2);
        if (lower < trueES) && (trueES < upper)
            captures_trueES_cnt = captures_trueES_cnt + 1;
        end
        interval_length = interval_length + (upper - lower);
    end
    coverage_accuracy = captures_trueES_cnt / rep;
    avg_interval_length = interval_length / rep;
end

function [coverage_accuracy, avg_interval_length] = nonparametric_bootstrap(...
    T, rep, df, mu, alpha, trueES)
    B = 500;
    captures_trueES_cnt = 0;
    interval_length = 0;
    for i = 1:rep
        data = nctrnd_simulate(df, mu, T, 1);
        ci = bootci(B, {@(data) empirical_ES(data, alpha), data},...
            'Alpha', 0.1);
        lower = ci(1);
        upper = ci(2);
        
        if (lower < trueES) && (trueES < upper)
            captures_trueES_cnt = captures_trueES_cnt + 1;
        end
        interval_length = interval_length + (upper - lower);
    end
    coverage_accuracy = captures_trueES_cnt / rep;
    avg_interval_length = interval_length / rep;
end

% function ES = ES_from_MLE(data, alpha, df, mu)
%     % mle estimation is too slow, how to solve this issue? 
% %     tmp = mle(data, "Distribution", "tLocationScale");
% %     loc = tmp(1);
% %     scale = tmp(2);
% %     df = tmp(3);
%     tmp = nctlikmax(data, [df, mu]);
%     df = tmp(1);
%     mu = tmp(2);
%     ES = theoretical_ES_NCT_direct_integration(df, mu, alpha);
% end

% % df: degree of freedom
% % mu: noncentrality 
% function ES = theoretical_ES_NCT_direct_integration(df, mu, alpha)
%     c01 = nctinv(alpha, df, mu); % left tail quantile, for loc-0 scale-1
% %     ES01 = -tpdf(c01,df)/tcdf(c01,df) * (df+c01^2)/(df-1);
%     I01 = @(x) x .* stdnctpdf(x, df, mu);
%     ES = integral(I01, -Inf, c01) / alpha; % true theoretical ES through integration
% end

% function ES = theoretical_ES_NCT_from_simulation(df, mu, alpha, N)
%     data = nctrnd_simulate(df, mu, N, 1);
%     ES = empirical_ES(data, alpha);
% end

% % theoretical ES for t distribution 
% function ES = theoretical_ES_t(loc, scale, df, alpha)
%     c01 = tinv(alpha , df); % left tail quantile, for loc-0 scale-1
% %     truec = loc+scale*c01; % left tail quantile c
%     ES01 = -tpdf(c01,df)/tcdf(c01,df) * (df+c01^2)/(df-1);
%     ES = loc+scale*ES01; % true theoretical ES
% end

% function ES = empirical_ES(data, alpha)
%     VaR = quantile(data, alpha);
%     tmp = data(data <= VaR);
%     ES = mean(tmp);
% end 

% function MLE = tlikmax(x, initvec)
%     tol = 1e-5;
%     opts = optimset('Disp', 'none', 'LargeScale', 'Off', ...
%         'TolFun', tol, 'TolX', tol, 'Maxiter', 200);
%     MLE = fminunc(@(param) tloglik(param, x), initvec, opts);
% end

% function ll = tloglik(param, x)
%     v = param(1); mu = param(2); c = param(3);
%     if v < 0, v = abs(v); end
%     if c < 0, c = abs(c); end
%     K = beta(v/2, 0.5) * sqrt(v); z = (x-mu) / c;
%     ll = -log(c) - log(K) - ((v+1)/2 * log(1 + (z.^2)/v));
%     ll = -sum(ll);
% end

